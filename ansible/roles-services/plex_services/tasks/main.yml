---

# Plex Services Role Tasks
# This role uses global variables from group_vars/all.yml
- name: Install NFS client packages
  apt:
    name:
      - nfs-common
      - nfs-kernel-server
    state: present
    update_cache: yes
  when: nfs_enabled | default(true)
  tags:
    - plex_services
    - packages
    - nfs

- name: Install Docker using geerlingguy.docker
  import_role:
    name: geerlingguy.docker
  tags:
    - plex_services
    - docker
    - packages

- name: Create plex-services system group
  group:
    name: "{{ plex_services_group }}"
    gid: "{{ plex_services_pgid }}"
    state: present
  tags:
    - plex_services
    - users

- name: Create individual system users for each service
  user:
    name: "{{ item.key }}"
    uid: "{{ item.value.PUID }}"
    group: "{{ plex_services_group }}"
    shell: /usr/sbin/nologin
    home: /docker/{{ item.key }}
    create_home: false
    system: true
    state: present
  loop: "{{ plex_services | dict2items }}"
  loop_control:
    label: "{{ item.key }} (UID: {{ item.value.PUID }})"
  tags:
    - plex_services
    - users

- name: Create plex services directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /docker
    - /configarr
  tags:
    - plex_services
    - config

- name: Create empty config folders for each service
  file:
    path: "/docker/{{ item.key }}"
    state: directory
    owner: "{{ item.key }}"
    group: "{{ plex_services_group }}"
    mode: '0640'
  loop: "{{ plex_services | dict2items }}"
  loop_control:
    label: "{{ item.key }} config"
  when: item.key is defined
  tags:
    - plex_services
    - config

- name: Install PostgreSQL client packages
  apt:
    name:
      - postgresql-client-common
      - postgresql-client
      - python3-psycopg2
      - smbclient
    state: present
    update_cache: yes
  tags:
    - plex_services
    - packages
    - postgres

- name: Copy PostgreSQL PBS backup script
  template:
    src: postgres_pbs_backup.sh.j2
    dest: /usr/local/bin/postgres_pbs_backup.sh
    owner: root
    group: root
    mode: '0755'
  when: pbs_backup_enabled | default(true)
  tags:
    - plex_services
    - backup
    - pbs
    - postgres

- name: Copy PostgreSQL legacy backup script (SMB)
  template:
    src: postgres_backup.sh.j2
    dest: /usr/local/bin/postgres_backup.sh
    owner: root
    group: root
    mode: '0755'
  when: not (pbs_backup_enabled | default(true))
  tags:
    - plex_services
    - backup
    - smb
    - postgres

- name: Copy PostgreSQL restore script
  template:
    src: postgres_restore.sh.j2
    dest: /usr/local/bin/postgres_restore.sh
    owner: root
    group: root
    mode: '0755'
  tags:
    - plex_services
    - restore
    - postgres

- name: Create PostgreSQL PBS backup cron job
  cron:
    name: "PostgreSQL PBS backup"
    cron_file: postgres_pbs_backup
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/postgres_pbs_backup.sh >> /var/log/postgres_pbs_backup.log 2>&1"
    user: root
  when: pbs_backup_enabled | default(true)
  tags:
    - plex_services
    - backup
    - pbs
    - postgres
    - cron

- name: Create PostgreSQL legacy backup cron job (SMB)
  cron:
    name: "PostgreSQL backup"
    cron_file: postgres_backup
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/postgres_backup.sh >> /var/log/postgres_backup.log 2>&1"
    user: root
  when: not (pbs_backup_enabled | default(true))
  tags:
    - plex_services
    - backup
    - smb
    - postgres
    - cron

- name: Create plex services docker compose file
  template:
    src: docker-compose.yml.j2
    dest: /docker/docker-compose-plex-services.yml
    owner: root
    group: root
    mode: '0644'
  notify:
    - restart plex services docker compose
  tags:
    - plex_services
    - config
    - compose

- name: Ensure docker service is started and enabled
  systemd:
    name: docker
    state: started
    enabled: yes
  tags:
    - plex_services
    - docker
    - service

- name: Check if PostgreSQL container already exists
  community.docker.docker_container_info:
    name: postgres14
  register: postgres_container_info
  ignore_errors: true
  tags:
    - plex_services
    - postgres
    - validate

- name: Start PostgreSQL container only (first)
  community.docker.docker_compose_v2:
    project_src: /docker
    files:
      - docker-compose-plex-services.yml
    services:
      - postgres
    wait: true
    wait_timeout: 120
  tags:
    - plex_services
    - postgres
    - compose
    - deploy

- name: Wait for PostgreSQL to be ready
  wait_for:
    port: 5432
    host: localhost
    timeout: 300
    delay: 10
  tags:
    - plex_services
    - postgres
    - validate

- name: Create PostgreSQL users for each service
  community.postgresql.postgresql_user:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    login_db: "{{ postgres_default_db }}"
    name: "{{ item.value.db_user }}"
    password: "{{ item.value.db_password }}"
    encrypted: true
    state: present
  loop: "{{ plex_services | dict2items }}"
  loop_control:
    label: "{{ item.key }} DB user"
  when: item.value.db_user is defined
  tags:
    - plex_services
    - postgres
    - database

- name: Initialize plex_service_db_pairs
  set_fact:
    plex_service_db_pairs: []
  tags:
    - plex_services
    - postgres
    - database

- name: Add service/db pairs to plex_service_db_pairs
  set_fact:
    plex_service_db_pairs: "{{ plex_service_db_pairs + [{'service': item.0.key, 'db_user': item.0.value.db_user, 'db_name': item.1}] }}"
  with_subelements:
    - "{{ plex_services | dict2items }}"
    - value.dbs
  loop_control:
    label: "{{ item.0.key }}: {{ item.1 }}"
  when: item.0.value.db_user is defined and item.1 is defined
  vars:
    ansible_subelements_skip_missing: true
  tags:
    - plex_services
    - postgres
    - database

- name: Create databases for each plex service and db
  community.postgresql.postgresql_db:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    name: "{{ item.db_name }}"
    owner: "{{ item.db_user }}"
    state: present
  loop: "{{ plex_service_db_pairs }}"
  loop_control:
    label: "{{ item.service }}: {{ item.db_name }}"
  when: item.db_user is defined
  tags:
    - plex_services
    - postgres
    - database

- name: Grant database privileges to service users
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    login_db: "{{ item.db_name }}"
    role: "{{ item.db_user }}"
    privs: ALL
    type: database
    obj: "{{ item.db_name }}"
  loop: "{{ plex_service_db_pairs }}"

- name: Grant schema privileges to service users
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    login_db: "{{ item.db_name }}"
    role: "{{ item.db_user }}"
    objs: public
    privs: ALL
    type: schema
    state: present
  loop: "{{ plex_service_db_pairs }}"
  loop_control:
    label: "{{ item.service }}: {{ item.db_name }} schema privileges"
  when: item.db_user is defined
  tags:
    - plex_services
    - postgres
    - database

- name: Attempt to restore databases from remote backup on first deployment
  shell: |
    # Check if remote backups exist and restore the latest ones
    if /usr/local/bin/postgres_restore.sh --list-remote | grep -q "\.sql\.gz$"; then
      echo "Remote backups found, attempting to restore..."
      
      # Get list of databases from remote backups
      databases=$(/usr/local/bin/postgres_restore.sh --list-remote | grep -o '^[^_]*' | sort -u)
      
      for db in $databases; do
        echo "Restoring database: $db"
        /usr/local/bin/postgres_restore.sh -d "$db" -r -l || echo "Failed to restore $db, continuing..."
      done
      
      echo "Database restore completed"
      # Mark as initialized since we restored existing data
      touch /docker/.postgres_initialized
      exit 0
    else
      echo "No remote backups found, will proceed with database initialization"
      exit 1
    fi
  when: 
    #- not postgres_init_file.stat.exists 
    - postgres_backup_enabled | default(true)
  register: postgres_restore_result
  failed_when: false
  tags:
    - plex_services
    - postgres
    - restore

- name: Display PostgreSQL restore results
  debug:
    msg: "{{ postgres_restore_result.stdout_lines }}"
  when: postgres_restore_result is defined and postgres_restore_result.stdout_lines is defined
  tags:
    - plex_services
    - postgres
    - restore

- name: Ensure lxml is installed for XML config management
  apt:
    name: python3-lxml
    state: present
    update_cache: yes
  become: true
  tags:
    - plex_services
    - packages

- name: Update config files for all containers with a database
  block:
    - name: Update XML config files with Postgres settings
      community.general.xml:
        path: "/docker/{{ item.key }}/{{ item.value.config }}"
        xpath: /Config/PostgresUser
        value: "{{ item.value.db_user }}"
        state: present
      loop: "{{ plex_services | dict2items }}"
      loop_control:
        label: "{{ item.key }}: PostgresUser"
      when:
        - item.value.config is defined
        - item.value.db_user is defined
        - item.value.config | regex_search('\.xml$') is not none

    - name: Update XML config files with PostgresPassword
      community.general.xml:
        path: "/docker/{{ item.key }}/{{ item.value.config }}"
        xpath: /Config/PostgresPassword
        value: "{{ item.value.db_password }}"
        state: present
      loop: "{{ plex_services | dict2items }}"
      loop_control:
        label: "{{ item.key }}: PostgresPassword"
      when:
        - item.value.config is defined
        - item.value.db_password is defined
        - item.value.config | regex_search('\.xml$') is not none

    - name: Update XML config files with PostgresHost
      community.general.xml:
        path: "/docker/{{ item.key }}/{{ item.value.config }}"
        xpath: /Config/PostgresHost
        value: "postgres"
        state: present
      loop: "{{ plex_services | dict2items }}"
      loop_control:
        label: "{{ item.key }}: PostgresHost"
      when:
        - item.value.config is defined
        - item.value.config | regex_search('\.xml$') is not none
        - item.value.db_user is defined

    - name: Update XML config files with PostgresPort
      community.general.xml:
        path: "/docker/{{ item.key }}/{{ item.value.config }}"
        xpath: /Config/PostgresPort
        value: "5432"
        state: present
      loop: "{{ plex_services | dict2items }}"
      loop_control:
        label: "{{ item.key }}: PostgresPort"
      when:
        - item.value.config is defined
        - item.value.config | regex_search('\.xml$') is not none
        - item.value.db_user is defined
  tags:
    - plex_services
    - config
    - postgres

- name: Read ApiKey from each *arr config.xml
  block:
    - name: Read config XML and register output
      community.general.xml:
        path: "/docker/{{ item.key }}/{{ item.value.config }}"
        xpath: "/Config/ApiKey"
        content: text
      register: xml_result
      when:
        - item.value.config is defined
        - item.value.config | regex_search('\.xml$') is not none
      loop: "{{ plex_services | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Set api_key fact for each service
      set_fact:
        arr_api_keys: >-
          {{
            arr_api_keys | default({}) |
            combine({ item.item.key: item.matches[0].ApiKey | default('') })
          }}
      loop: "{{ xml_result.results }}"
      when:
        - item is mapping
        - "'matches' in item"
        - item.matches | length > 0
        - item.matches[0] is mapping
        - "'ApiKey' in item.matches[0]"
  tags:
    - plex_services
    - config

- name: Correct permissions for plex services directories
  file:
    path: "/docker/{{ item.key }}"
    state: directory
    owner: "{{ item.key }}"
    group: "{{ plex_services_group }}"
    recurse: yes
  loop: "{{ plex_services | dict2items }}"
  loop_control: 
    label: "{{ item.key }} config"
  tags:
    - plex_services
    - config
  
- name: Restart all plex services after config update
  community.docker.docker_compose_v2:
    project_src: /docker
    files:
      - docker-compose-plex-services.yml
    state: restarted
    wait: true
    wait_timeout: 600
  tags:
    - plex_services
    - compose
    - service

- name: Ensure pip is installed (Debian/Ubuntu)
  apt:
    name: python3-pip
    state: present
  become: true
  tags:
    - plex_services
    - packages
  
- name: Ensure prowlarr-py is installed
  ansible.builtin.pip:
    name: prowlarr-py
    executable: pip
    break_system_packages: true
    extra_args: --ignore-installed
  become: true
  tags:
    - plex_services
    - packages
    - prowlarr

- name: Configure Prowlarr (Indexer Management)
  devopsarr.prowlarr.prowlarr_indexer:
    prowlarr_api_key: "{{ prowlarr_api_key }}"
    prowlarr_url: "http://localhost:9696"
    name: "NZBPlanet"
    enable: true
    priority: 10
    config_contract: "NewznabSettings"
    implementation: "Newznab"
    protocol: "usenet"
    fields:
    - name: "baseUrl"
      value: "https://api.nzbplanet.net"
  tags:
    - plex_services
    - prowlarr
    - config

- name: Generate configarr_secrets.yaml from template
  template:
    src: configarr_secrets.yml.j2
    dest: /configarr/secrets.yml
    owner: root
    group: root
    mode: '0600'
  tags:
    - plex_services
    - config
    - secrets

- name: Create PBS backup script for Docker containers
  ansible.builtin.template:
    dest: /usr/local/bin/docker_pbs_backup.sh
    mode: '0755'
    owner: root
    group: root
    src: docker_pbs_backup.sh.j2
  when: pbs_backup_enabled | default(true)
  tags:
    - plex_services
    - backup
    - pbs

- name: Ensure cron job for nightly Docker PBS backup
  ansible.builtin.cron:
    name: "Nightly Docker PBS backup"
    user: root
    job: "/usr/local/bin/docker_pbs_backup.sh"
    minute: 30
    hour: 2
    state: present
  when: pbs_backup_enabled | default(true)
  tags:
    - plex_services
    - backup
    - pbs
    - cron