---
# Plex Services Role Tasks
# This role uses global variables from group_vars/all.yml:
# - plex_nfs_src: NFS server and path for media storage
# - other service-specific variables as needed

- name: Install NFS client packages
  apt:
    name:
      - nfs-common
      - nfs-kernel-server
    state: present
    update_cache: yes
  when: nfs_enabled | default(true)

- name: Install Docker using geerlingguy.docker
  import_role:
    name: geerlingguy.docker

- name: Create plex-services system group
  group:
    name: "{{ plex_services_group }}"
    gid: "{{ plex_services_pgid }}"
    state: present

- name: Create individual system users for each service
  user:
    name: "{{ item.key }}"
    uid: "{{ item.value.uid }}"
    group: "{{ plex_services_group }}"
    shell: /usr/sbin/nologin
    home: /docker/{{ item.key }}
    create_home: false
    system: true
    state: present
  loop: "{{ service_users | dict2items }}"
  loop_control:
    label: "{{ item.key }} (UID: {{ item.value.uid }})"

- name: Create plex services directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /docker
    - /docker/portainer
    - /docker/postgres
    - /docker/postgres_backups

- name: Create service-specific directories with proper ownership
  file:
    path: "/docker/{{ item.key }}"
    state: directory
    owner: "{{ item.key }}"
    group: "{{ plex_services_group }}"
    mode: '0755'
  loop: "{{ service_users | dict2items }}"
  loop_control:
    label: "{{ item.key }} directory"

- name: Install PostgreSQL client packages
  apt:
    name:
      - postgresql-client-common
      - postgresql-client
      - python3-psycopg2
      - smbclient
    state: present
    update_cache: yes

- name: Copy PostgreSQL backup script
  template:
    src: postgres_backup.sh.j2
    dest: /usr/local/bin/postgres_backup.sh
    owner: root
    group: root
    mode: '0755'

- name: Copy PostgreSQL restore script
  template:
    src: postgres_restore.sh.j2
    dest: /usr/local/bin/postgres_restore.sh
    owner: root
    group: root
    mode: '0755'

- name: Create PostgreSQL backup cron job
  cron:
    name: "PostgreSQL backup"
    cron_file: postgres_backup
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/postgres_backup.sh >> /var/log/postgres_backup.log 2>&1"
    user: root
  when: postgres_backup_enabled | default(true)

- name: Create plex services docker compose file
  template:
    src: docker-compose.yml.j2
    dest: /docker/docker-compose-plex-services.yml
    owner: root
    group: root
    mode: '0644'
  notify:
    - restart plex services docker compose

- name: Ensure docker service is started and enabled
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Check if PostgreSQL container already exists
  community.docker.docker_container_info:
    name: postgres14
  register: postgres_container_info
  ignore_errors: true

- name: Start PostgreSQL container only (first)
  community.docker.docker_compose_v2:
    project_src: /docker
    files:
      - docker-compose-plex-services.yml
    services:
      - postgres
    wait: true
    wait_timeout: 120

- name: Wait for PostgreSQL to be ready
  wait_for:
    port: 5432
    host: localhost
    timeout: 300
    delay: 10

- name: Check if this is a first-time deployment
  stat:
    path: /docker/.postgres_initialized
  register: postgres_init_file

- name: Create PostgreSQL users for each service
  community.postgresql.postgresql_user:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    login_db: "{{ postgres_default_db }}"
    name: "{{ item.value.db_user }}"
    password: "{{ item.value.db_password }}"
    encrypted: true
    state: present
  loop: "{{ service_users | dict2items }}"
  loop_control:
    label: "{{ item.key }} DB user"
  when: item.value.db_user is defined

- name: Create databases for services
  community.postgresql.postgresql_db:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    name: "{{ item.key }}"
    owner: "{{ service_users[item.value].db_user }}"
    state: present
  loop:
    - { key: "sonarr-main", value: "sonarr" }
    - { key: "sonarr-log", value: "sonarr" }
    - { key: "radarr-main", value: "radarr" }
    - { key: "radarr-log", value: "radarr" }
    - { key: "prowlarr-main", value: "prowlarr" }
    - { key: "prowlarr-log", value: "prowlarr" }
    - { key: "bazarr", value: "bazarr" }
    - { key: "jellyseerr", value: "jellyseerr" }
  loop_control:
    label: "{{ item.key }} database"
  when: service_users[item.value].db_user is defined

- name: Grant database privileges to service users
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    database: "{{ item.key }}"
    role: "{{ service_users[item.value].db_user }}"
    privs: ALL
    type: database
    state: present
  loop:
    - { key: "sonarr-main", value: "sonarr" }
    - { key: "sonarr-log", value: "sonarr" }
    - { key: "radarr-main", value: "radarr" }
    - { key: "radarr-log", value: "radarr" }
    - { key: "prowlarr-main", value: "prowlarr" }
    - { key: "prowlarr-log", value: "prowlarr" }
    - { key: "bazarr", value: "bazarr" }
    - { key: "jellyseerr", value: "jellyseerr" }
  loop_control:
    label: "{{ item.key }} privileges"
  when: service_users[item.value].db_user is defined

- name: Grant schema privileges to service users
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    database: "{{ item.key }}"
    role: "{{ service_users[item.value].db_user }}"
    objs: public
    privs: ALL
    type: schema
    state: present
  loop:
    - { key: "sonarr-main", value: "sonarr" }
    - { key: "sonarr-log", value: "sonarr" }
    - { key: "radarr-main", value: "radarr" }
    - { key: "radarr-log", value: "radarr" }
    - { key: "prowlarr-main", value: "prowlarr" }
    - { key: "prowlarr-log", value: "prowlarr" }
    - { key: "bazarr", value: "bazarr" }
    - { key: "jellyseerr", value: "jellyseerr" }
  loop_control:
    label: "{{ item.key }} schema privileges"
  when: service_users[item.value].db_user is defined

- name: Attempt to restore databases from remote backup on first deployment
  shell: |
    # Check if remote backups exist and restore the latest ones
    if /usr/local/bin/postgres_restore.sh --list-remote | grep -q "\.sql\.gz$"; then
      echo "Remote backups found, attempting to restore..."
      
      # Get list of databases from remote backups
      databases=$(/usr/local/bin/postgres_restore.sh --list-remote | grep -o '^[^_]*' | sort -u)
      
      for db in $databases; do
        echo "Restoring database: $db"
        /usr/local/bin/postgres_restore.sh -d "$db" -r -l || echo "Failed to restore $db, continuing..."
      done
      
      echo "Database restore completed"
      # Mark as initialized since we restored existing data
      touch /docker/.postgres_initialized
      exit 0
    else
      echo "No remote backups found, will proceed with database initialization"
      exit 1
    fi
  when: 
    - not postgres_init_file.stat.exists 
    - postgres_backup_enabled | default(true)
  register: postgres_restore_result
  failed_when: false

- name: Display PostgreSQL restore results
  debug:
    msg: "{{ postgres_restore_result.stdout_lines }}"
  when: postgres_restore_result is defined and postgres_restore_result.stdout_lines is defined

- name: Create application configuration files (before starting services)
  block:
    - name: Create Sonarr configuration file
      template:
        src: sonarr_config.xml.j2
        dest: /docker/sonarr/config.xml
        owner: sonarr
        group: "{{ plex_services_group }}"
        mode: '0644'
        backup: true
        force: true

    - name: Create Radarr configuration file
      template:
        src: radarr_config.xml.j2
        dest: /docker/radarr/config.xml
        owner: radarr
        group: "{{ plex_services_group }}"
        mode: '0644'
        backup: true
        force: true

    - name: Create Prowlarr configuration file
      template:
        src: prowlarr_config.xml.j2
        dest: /docker/prowlarr/config.xml
        owner: prowlarr
        group: "{{ plex_services_group }}"
        mode: '0644'
        backup: true
        force: true

    - name: Create Bazarr configuration file
      template:
        src: bazarr_config.ini.j2
        dest: /docker/bazarr/config/config.ini
        owner: bazarr
        group: "{{ plex_services_group }}"
        mode: '0644'
        backup: true
        force: true

    - name: Create Jellyseerr configuration file
      template:
        src: jellyseerr_settings.json.j2
        dest: /docker/jellyseerr/settings.json
        owner: jellyseerr
        group: "{{ plex_services_group }}"
        mode: '0644'
        backup: true
        force: true

- name: Mark PostgreSQL as initialized (fallback)
  file:
    path: /docker/.postgres_initialized
    state: touch
    mode: '0644'
  when: not postgres_init_file.stat.exists

- name: Fix ownership of existing service files 
  shell: |
    # Fix ownership for each service directory and its contents
    chown -R {{ item.key }}:{{ plex_services_group }} /docker/{{ item.key }}/
  loop: "{{ service_users | dict2items }}"
  loop_control:
    label: "{{ item.key }} files ownership"

- name: Start all remaining plex services after database initialization
  community.docker.docker_compose_v2:
    project_src: /docker
    files:
      - docker-compose-plex-services.yml
    wait: true
    wait_timeout: 600