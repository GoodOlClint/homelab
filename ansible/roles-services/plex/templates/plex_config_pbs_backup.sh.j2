#!/bin/bash
#
# Plex Config Backup Script using Proxmox Backup Server
# Backs up Plex databases, plugins, and config directly to PBS with deduplication
#
set -euo pipefail

# Configuration
PLEX_DIR="/var/lib/plexmediaserver/Library/Application Support/Plex Media Server"
DB_DIR="$PLEX_DIR/Plug-in Support/Databases"
DB_MAIN="com.plexapp.plugins.library.db"
DB_BLOBS="com.plexapp.plugins.library.blobs.db"
PLEX_SQLITE="/usr/lib/plexmediaserver/Plex SQLite"
PLEX_TOKEN="{{ plex_token }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_FILE="/var/log/plex_config_pbs_backup.log"
BACKUP_DIR="/tmp/plex_pbs_backup"

# PBS Configuration
{% if pbs_backup_enabled | default(true) %}
PBS_ENV_FILE="/etc/proxmox-backup/pbs-client.env"
PBS_NAMESPACE="{{ plex_pbs_namespace | default('plex') }}"
PBS_ENABLED=true

# Source PBS environment file for credentials
if [ -f "$PBS_ENV_FILE" ]; then
    source "$PBS_ENV_FILE"
else
    log "ERROR: PBS environment file not found at $PBS_ENV_FILE"
    PBS_ENABLED=false
fi
{% else %}
PBS_ENABLED=false
{% endif %}

# Backup hostname for PBS (defaults to actual hostname)
BACKUP_HOSTNAME="{{ inventory_hostname | default(ansible_hostname) }}"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "ERROR: $1"
    # Cleanup temp directory on error
    rm -rf "$BACKUP_DIR"
    # Ensure Plex is started if we stopped it
    if systemctl is-active --quiet plexmediaserver; then
        :
    else
        log "Starting plexmediaserver after error..."
        systemctl start plexmediaserver || true
    fi
    exit 1
}

# Cleanup function
cleanup() {
    log "Cleaning up temporary files..."
    rm -rf "$BACKUP_DIR"
}
trap cleanup EXIT

log "Starting Plex config PBS backup process"

# Check if PBS is available
if [ "$PBS_ENABLED" = true ]; then
    if ! command -v proxmox-backup-client &> /dev/null; then
        error_exit "proxmox-backup-client not found. Install with: apt install proxmox-backup-client"
    fi
    
    # Test PBS connection and create namespace if needed
    log "Testing PBS connection..."
    set +e  # Temporarily disable exit on error for PBS test
    proxmox-backup-client snapshot list --ns "$PBS_NAMESPACE" &>/dev/null
    PBS_TEST_EXIT=$?
    set -e  # Re-enable exit on error
    
    if [ $PBS_TEST_EXIT -ne 0 ] && [ $PBS_TEST_EXIT -ne 255 ]; then
        log "WARNING: Cannot connect to PBS (exit code: $PBS_TEST_EXIT), falling back to local backup only"
        PBS_ENABLED=false
    else
        # Create namespace if it doesn't exist (ENOENT means namespace doesn't exist yet)
        if [ $PBS_TEST_EXIT -eq 255 ]; then
            log "Namespace '$PBS_NAMESPACE' doesn't exist, creating it..."
            set +e
            proxmox-backup-client namespace create "$PBS_NAMESPACE"
            CREATE_EXIT=$?
            set -e
            if [ $CREATE_EXIT -eq 0 ]; then
                log "Successfully created namespace '$PBS_NAMESPACE'"
            else
                log "WARNING: Failed to create namespace (exit code: $CREATE_EXIT), falling back to local backup only"
                PBS_ENABLED=false
            fi
        fi
    fi
fi

log "Checking for active Plex sessions..."

# Check if Plex is in use (active streams via API), retry every 5 minutes for up to 2 hours
max_attempts=24
attempt=1
while true; do
    session_count=$(curl -s -H "X-Plex-Token: $PLEX_TOKEN" http://localhost:32400/status/sessions | grep -o '<MediaContainer[^>]*size="[0-9]*"' | sed -E 's/.*size="([0-9]+)"/\1/' || echo "0")
    if [[ -z "$session_count" ]]; then
        session_count=0
    fi
    if (( session_count == 0 )); then
        log "No active sessions. Proceeding with backup."
        break
    fi
    if [ $attempt -ge $max_attempts ]; then
        log "Plex is still in use after 2 hours, skipping backup."
        exit 0
    fi
    log "Plex is in use ($session_count active sessions), retrying in 5 minutes (attempt $attempt/$max_attempts)."
    sleep 300
    attempt=$((attempt+1))
done

# Create backup directory
mkdir -p "$BACKUP_DIR"

log "Stopping plexmediaserver..."
systemctl stop plexmediaserver || error_exit "Failed to stop plexmediaserver"

log "Copying DB, Plug-ins, and Preferences.xml..."
# Copy files with error checking
cp "$DB_DIR/$DB_MAIN" "$BACKUP_DIR/${DB_MAIN}" || error_exit "Failed to copy main database"
cp "$DB_DIR/$DB_BLOBS" "$BACKUP_DIR/${DB_BLOBS}" || error_exit "Failed to copy blobs database"
cp -a "$PLEX_DIR/Plug-ins" "$BACKUP_DIR/Plug-ins" || error_exit "Failed to copy Plug-ins"
cp "$PLEX_DIR/Preferences.xml" "$BACKUP_DIR/Preferences.xml" || error_exit "Failed to copy Preferences.xml"

log "Starting plexmediaserver..."
systemctl start plexmediaserver || error_exit "Failed to start plexmediaserver"

# Run integrity check on copied main database
log "Running integrity check on main DB..."
if [ -f "$BACKUP_DIR/$DB_MAIN" ]; then
    INTEGRITY=$("$PLEX_SQLITE" "$BACKUP_DIR/$DB_MAIN" "PRAGMA integrity_check;" | tail -n 1)
    if [ "$INTEGRITY" != "ok" ]; then
        error_exit "Database integrity check failed: $INTEGRITY"
    fi
    log "Main database integrity check passed."
fi

# Run integrity check on copied blobs database
log "Running integrity check on blobs DB..."
if [ -f "$BACKUP_DIR/$DB_BLOBS" ]; then
    INTEGRITY_BLOBS=$("$PLEX_SQLITE" "$BACKUP_DIR/$DB_BLOBS" "PRAGMA integrity_check;" | tail -n 1)
    if [ "$INTEGRITY_BLOBS" != "ok" ]; then
        error_exit "Blobs database integrity check failed: $INTEGRITY_BLOBS"
    fi
    log "Blobs database integrity check passed."
fi

# Upload to PBS if enabled
if [ "$PBS_ENABLED" = true ]; then
    log "Uploading backups to Proxmox Backup Server..."
    
    # Create backup ID (PBS adds timestamp automatically)
    BACKUP_ID="plex-config"
    
    log "Backing up to PBS repository: $PBS_REPOSITORY"
    
    # Execute PBS backup - backup the entire directory
    proxmox-backup-client backup \
        "plex-config.pxar:$BACKUP_DIR" \
        --ns "$PBS_NAMESPACE" \
        --backup-id "$BACKUP_ID" \
        --backup-time "$(date +%s)"
    
    if [ $? -eq 0 ]; then
        log "Successfully uploaded backups to PBS"
        
        # List recent backups
        log "Recent PBS backups:"
        proxmox-backup-client snapshot list --ns "$PBS_NAMESPACE" | tail -n 5
    else
        log "WARNING: Failed to upload backups to PBS"
    fi
else
    log "PBS backup disabled or unavailable, backups remain in $BACKUP_DIR"
    log "WARNING: Local backups will be deleted on script exit unless PBS is enabled"
fi

log "Plex config PBS backup process completed successfully"
