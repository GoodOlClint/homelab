---
- name: Install NVIDIA GRID driver
  import_role:
    name: nvidia

- name: Install Docker using geerlingguy.docker
  import_role:
    name: geerlingguy.docker

- name: Check if NVIDIA container toolkit GPG key exists
  stat:
    path: /etc/apt/trusted.gpg.d/libnvidia-container.gpg
  register: nvidia_gpg_key

- name: Ensure nvidia-container-toolkit apt GPG key
  ansible.builtin.apt_key:
    url: https://nvidia.github.io/libnvidia-container/gpgkey
    keyring: /etc/apt/trusted.gpg.d/libnvidia-container.gpg
    state: present
  when: not nvidia_gpg_key.stat.exists

- name: Check if NVIDIA container toolkit repo is present
  ansible.builtin.shell: grep -q '^deb .*/libnvidia-container' /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null
  register: nvidia_repo_present
  changed_when: false
  failed_when: false

- name: Ensure nvidia-container-toolkit repo
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/etc/apt/trusted.gpg.d/libnvidia-container.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /
    state: present
    filename: nvidia-container-toolkit
  when: nvidia_repo_present.rc != 0

- name: Ensure nvidia-container-toolkit package
  ansible.builtin.package:
    name: nvidia-container-toolkit
    update_cache: true
    state: present

- name: Check if nvidia-container-runtime is configured in Docker
  ansible.builtin.shell: |
    grep -q '"nvidia-container-runtime"' /etc/docker/daemon.json 2>/dev/null
  register: nvidia_runtime_configured
  changed_when: false
  failed_when: false

- name: Configure NVIDIA runtime for Docker
  ansible.builtin.shell: nvidia-ctk runtime configure --runtime=docker
  args:
    executable: /bin/bash
  register: nvidia_ctk_result
  when: nvidia_runtime_configured.rc != 0

- name: Restart Docker after NVIDIA toolkit install
  ansible.builtin.systemd:
    name: docker
    state: restarted
  when: nvidia_ctk_result is defined and nvidia_ctk_result is changed

- name: Verify CUDA container works
  community.docker.docker_container:
    name: nvidia-gpu-validation
    image: ubuntu
    command: nvidia-smi
    runtime: nvidia
    state: started
    device_requests:
      - driver: nvidia
        count: -1
        capabilities:
          - gpu

- name: Remove nvidia-gpu-validation container after test
  community.docker.docker_container:
    name: nvidia-gpu-validation
    state: absent

- name: Remove unused Ubuntu image after validation
  community.docker.docker_image:
    name: ubuntu
    state: absent
    force_absent: true

- name: Ensure NFS packages are installed
  apt:
    name: nfs-common
    state: present
    update_cache: yes

- name: Ensure NFS fstab entry and mount for /mnt/docker
  ansible.posix.mount:
    backup: yes
    boot: "yes"
    path: "/mnt/docker"
    src: "{{ docker_nfs_src }}"
    fstype: nfs
    opts: "defaults"
    state: "mounted"

- name: Ensure NFS fstab entry and mount for /mnt/plex
  ansible.posix.mount:
    backup: yes
    boot: "yes"
    path: "/mnt/plex"
    src: "{{ plex_nfs_src }}"
    fstype: nfs
    opts: "defaults"
    state: "mounted"
    
- name: Ensure /docker exists
  file:
    path: /docker
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Link /docker/appdata
  file:
    src: /mnt/docker
    dest: /docker/appdata
    state: link

- name: Link /docker/plex
  file:
    src: /mnt/plex/data
    dest: /docker/plex
    state: link

- name: Copy docker-compose.yml to the docker VM
  copy:
    src: files/docker-compose.yml
    dest: /opt/docker-compose.yml
    owner: root
    group: root
    mode: '0644'

- name: Reboot system to apply Docker and network configuration changes
  reboot:
    reboot_timeout: 300
    connect_timeout: 20
    test_command: systemctl is-active docker

- name: Deploy containers with Docker Compose
  community.docker.docker_compose_v2:
    project_src: /opt
    files:
      - docker-compose.yml
    state: present
  environment:
    CLOUDFLARED_TUNNEL_TOKEN: "{{ cloudflared_tunnel_token }}"
  retries: 3
  delay: 30
  register: compose_result
  until: compose_result is succeeded

- name: Display final container status
  command: docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
  register: container_status
  ignore_errors: true

- name: Show running containers
  debug:
    msg: "{{ container_status.stdout_lines }}"
  when: container_status.stdout_lines is defined
