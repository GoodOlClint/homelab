---
- name: Install NVIDIA GRID driver
  import_role:
    name: nvidia
  tags:
    - docker
    - nvidia
    - driver

- name: Install Docker using geerlingguy.docker
  import_role:
    name: geerlingguy.docker
  register: docker_role_result
  tags:
    - docker
    - packages

- name: Check if NVIDIA container toolkit GPG key exists
  stat:
    path: /etc/apt/trusted.gpg.d/libnvidia-container.gpg
  register: nvidia_gpg_key
  tags:
    - docker
    - nvidia
    - packages

- name: Ensure nvidia-container-toolkit apt GPG key
  ansible.builtin.apt_key:
    url: https://nvidia.github.io/libnvidia-container/gpgkey
    keyring: /etc/apt/trusted.gpg.d/libnvidia-container.gpg
    state: present
  when: not nvidia_gpg_key.stat.exists
  tags:
    - docker
    - nvidia
    - packages

- name: Check if NVIDIA container toolkit repo is present
  ansible.builtin.shell: grep -q '^deb .*/libnvidia-container' /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null
  register: nvidia_repo_present
  changed_when: false
  failed_when: false
  tags:
    - docker
    - nvidia
    - packages

- name: Ensure nvidia-container-toolkit repo
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/etc/apt/trusted.gpg.d/libnvidia-container.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /
    state: present
    filename: nvidia-container-toolkit
  when: nvidia_repo_present.rc != 0
  tags:
    - docker
    - nvidia
    - packages

- name: Ensure nvidia-container-toolkit package
  ansible.builtin.package:
    name: nvidia-container-toolkit
    update_cache: true
    state: present
  tags:
    - docker
    - nvidia
    - packages

- name: Check if nvidia-container-runtime is configured in Docker
  ansible.builtin.shell: |
    grep -q '"nvidia-container-runtime"' /etc/docker/daemon.json 2>/dev/null
  register: nvidia_runtime_configured
  changed_when: false
  failed_when: false
  tags:
    - docker
    - nvidia
    - config

- name: Configure NVIDIA runtime for Docker
  ansible.builtin.shell: nvidia-ctk runtime configure --runtime=docker
  args:
    executable: /bin/bash
  register: nvidia_ctk_result
  when: nvidia_runtime_configured.rc != 0
  tags:
    - docker
    - nvidia
    - config

- name: Restart Docker after NVIDIA toolkit install
  ansible.builtin.systemd:
    name: docker
    state: restarted
  when: nvidia_ctk_result is defined and nvidia_ctk_result is changed
  tags:
    - docker
    - nvidia
    - service

- name: Verify CUDA container works
  community.docker.docker_container:
    name: nvidia-gpu-validation
    image: ubuntu
    command: nvidia-smi
    runtime: nvidia
    state: started
    device_requests:
      - driver: nvidia
        count: -1
        capabilities:
          - gpu
  tags:
    - docker
    - nvidia
    - validate

- name: Remove nvidia-gpu-validation container after test
  community.docker.docker_container:
    name: nvidia-gpu-validation
    state: absent
  tags:
    - docker
    - nvidia
    - validate

- name: Remove unused Ubuntu image after validation
  community.docker.docker_image:
    name: ubuntu
    state: absent
    force_absent: true
  tags:
    - docker
    - nvidia
    - validate


- name: Deploy docker-compose.yml to the docker VM
  template:
    src: templates/docker-compose.yml.j2
    dest: /opt/docker-compose.yml
    owner: root
    group: root
    mode: '0644'
  vars:
    docker_nfs_server: "172.16.20.10"
    docker_nfs_path: "/volume1/docker"
    plex_nfs_path: "/volume1/plex/data"
    radarr_user: 2001
    radarr_group: 988
    radarr_umask: '002'
    radarr_timezone: 'America/Chicago'
    sonarr_user: 2002
    sonarr_group: 988
    sonarr_umask: '002'
    sonarr_timezone: 'America/Chicago'
    bazarr_user: 2004
    bazarr_group: 988
    bazarr_timezone: 'America/Chicago'
    prowlarr_user: 2005
    prowlarr_group: 988
    prowlarr_umask: '002'
    prowlarr_timezone: 'America/Chicago'
    tautulli_user: 2006
    tautulli_group: 988
    tautulli_timezone: 'America/Chicago'
    readarr_user: 2007
    readarr_group: 988
    readarr_umask: '002'
    readarr_timezone: 'America/Chicago'
    lidarr_user: 2008
    lidarr_group: 988
    lidarr_timezone: 'America/Chicago'
    sabnzbd_user: 2003
    sabnzbd_group: 988
    sabnzbd_umask: '002'
    sabnzbd_timezone: 'America/Chicago'
    plex_meta_manager_user: 1000
    plex_meta_manager_group: 988
    plex_meta_manager_timezone: 'America/Chicago'
    ombi_user: 1000
    ombi_group: 988
    ombi_timezone: 'America/Chicago'
    ombi_mariadb_timezone: 'America/Chicago'
    kiwix_timezone: 'America/Chicago'
    boinc_user: 1000
    boinc_group: 988
    boinc_timezone: 'America/Chicago'
    doge_node_timezone: 'America/Chicago'
  tags:
    - docker
    - config
    - compose

- name: Create .env file for Docker Compose with secrets
  template:
    src: docker-env.j2
    dest: /opt/.env
    mode: '0600'
    owner: root
    group: root
  notify: restart docker services
  when: cloudflared_tunnel_token is defined and cloudflared_tunnel_token != ""
  tags:
    - docker
    - config
    - secrets

- name: Set reboot required flag
  set_fact:
    reboot_required: "{{ (nvidia_ctk_result is defined and nvidia_ctk_result is changed) or (docker_role_result is defined and docker_role_result is changed) }}"
  tags:
    - docker

- name: Reboot system if major Docker configuration changes were made
  reboot:
    reboot_timeout: 300
    connect_timeout: 20
    test_command: systemctl is-active docker
  when: reboot_required | default(false)
  tags:
    - docker
    - reboot

- name: Deploy containers with Docker Compose
  community.docker.docker_compose_v2:
    project_src: /opt
    files:
      - docker-compose.yml
    state: present
  environment:
    CLOUDFLARED_TUNNEL_TOKEN: "{{ cloudflared_tunnel_token }}"
  retries: 3
  delay: 30
  register: compose_result
  until: compose_result is succeeded
  tags:
    - docker
    - compose
    - deploy

- name: Display final container status
  shell: |
    docker ps --format "table {% raw %}{{.Names}}\t{{.Status}}\t{{.Ports}}{% endraw %}"
  register: container_status
  ignore_errors: true
  tags:
    - docker
    - validate

- name: Show running containers
  debug:
    msg: "{{ container_status.stdout_lines }}"
  when: container_status.stdout_lines is defined
  tags:
    - docker
    - validate

- name: Create PBS backup script for Docker containers
  ansible.builtin.template:
    dest: /usr/local/bin/docker_pbs_backup.sh
    mode: '0755'
    owner: root
    group: root
    src: docker_pbs_backup.sh.j2
  when: pbs_backup_enabled | default(true)
  tags:
    - docker
    - backup
    - pbs

- name: Ensure cron job for nightly Docker PBS backup
  ansible.builtin.cron:
    name: "Nightly Docker PBS backup"
    user: root
    job: "/usr/local/bin/docker_pbs_backup.sh"
    minute: 30
    hour: 2
    state: present
  when: pbs_backup_enabled | default(true)
  tags:
    - docker
    - backup
    - pbs
    - cron

