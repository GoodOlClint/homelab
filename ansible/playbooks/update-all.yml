---

- name: Update all VMs and Proxmox server
  hosts: all
  become: true
  tasks:
    - name: Update apt cache and upgrade all packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
      register: upgrade_result

- name: Update Homebridge plugins and Node.js
  hosts: homebridge
  become: true
  tasks:
    - name: Update Node.js and npm to latest
      apt:
        name:
          - nodejs
          - npm
        state: latest

    - name: Update all globally installed npm packages (including Homebridge plugins)
      ansible.builtin.shell: |
        npm update -g
      register: plugin_update
      changed_when: plugin_update.stdout != ""

    - name: Restart Homebridge service after updates
      ansible.builtin.systemd:
        name: homebridge
        state: restarted
      when: plugin_update.changed

- name: Update all Docker containers (pull latest and recreate)
  hosts: docker,plex-services
  become: true
  tasks:
    - name: Pull latest images for docker services
      community.docker.docker_compose_v2:
        project_src: /opt
        files:
          - docker-compose.yml
        pull: always
      when: inventory_hostname == 'docker'

    - name: Pull latest images for plex services
      community.docker.docker_compose_v2:
        project_src: /docker
        files:
          - docker-compose-plex-services.yml
        pull: always
      when: inventory_hostname == 'plex-services'

    - name: Restart docker services with latest images
      community.docker.docker_compose_v2:
        project_src: /opt
        files:
          - docker-compose.yml
        state: present
      when: inventory_hostname == 'docker'

    - name: Restart plex services with latest images
      community.docker.docker_compose_v2:
        project_src: /docker
        files:
          - docker-compose-plex-services.yml
        state: present
      when: inventory_hostname == 'plex-services'

    - name: Prune unused Docker images
      shell: docker image prune -af
      changed_when: false

- name: Final Reboot
  hosts: all
  become: true
  gather_facts: false
  tasks:

  - name: Check if reboot is required
    stat:
      path: /var/run/reboot-required
    register: reboot_required_file

  - name: Reboot server if required
    reboot:
      reboot_timeout: 300
      connect_timeout: 20
      test_command: uptime
      msg: "Rebooting due to system updates"
    when: reboot_required_file.stat.exists
