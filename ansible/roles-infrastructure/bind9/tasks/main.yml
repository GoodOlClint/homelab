
---
- name: Install bind9
  apt:
    name:
      - bind9
      - bind9utils
      - dnsutils
    state: present
    update_cache: yes

- name: Configure named.conf.options for forwarding to AdGuard
  template:
    src: named.conf.options.j2
    dest: /etc/bind/named.conf.options
    mode: '0644'
  notify: Restart bind9

- name: Configure named.conf.local for zones
  template:
    src: named.conf.local.j2
    dest: /etc/bind/named.conf.local
    mode: '0644'
  notify: Restart bind9

- name: Check if zone files exist
  stat:
    path: "/etc/bind/db.{{ item.zone }}"
  loop: "{{ dns_zones.values() }}"
  register: zone_files_stat

- name: Configure zone files for all zones (only if they don't exist)
  template:
    src: db.zone.j2
    dest: "/etc/bind/db.{{ item.item.zone }}"
    mode: '0644'
  loop: "{{ zone_files_stat.results }}"
  when: not item.stat.exists
  notify: Restart bind9

- name: Set ownership of zone files to bind user for dynamic updates
  file:
    path: "/etc/bind/db.{{ item.zone }}"
    owner: bind
    group: bind
    mode: '0644'
  loop: "{{ dns_zones.values() }}"

- name: Ensure /etc/bind directory is writable by bind user
  file:
    path: /etc/bind
    owner: bind
    group: bind
    mode: '0755'
    state: directory

- name: Check for corrupted journal files
  shell: |
    for zone in /etc/bind/db.*.jnl; do
      if [ -f "$zone" ]; then
        named-journalprint "$zone" > /dev/null 2>&1 || echo "$zone"
      fi
    done
  register: corrupt_journals
  changed_when: false
  failed_when: false

- name: Remove corrupted journal files if found
  file:
    path: "{{ item }}"
    state: absent
  loop: "{{ corrupt_journals.stdout_lines }}"
  when: corrupt_journals.stdout_lines | length > 0
  notify: Restart bind9

- name: Flush handlers to ensure bind9 is restarted if needed
  meta: flush_handlers

- name: Wait for DNS server to be responsive
  wait_for:
    host: 127.0.0.1
    port: 53
    timeout: 30

- name: Wait a few seconds for DNS to fully initialize
  pause:
    seconds: 3

- name: Check if zones are actually loaded in BIND
  shell: |
    loaded=0
    failed=0
    for zone in {{ dns_zones.values() | map(attribute='zone') | join(' ') }}; do
      if rndc zonestatus "$zone" > /dev/null 2>&1; then
        loaded=$((loaded + 1))
      else
        failed=$((failed + 1))
      fi
    done
    echo "loaded=$loaded failed=$failed"
  register: zone_status_check
  changed_when: false
  failed_when: false

- name: Remove all journal files if zones failed to load
  block:
    - name: Stop BIND service
      systemd:
        name: named
        state: stopped

    - name: Remove all journal files
      shell: rm -f /etc/bind/*.jnl
      args:
        warn: false

    - name: Start BIND service
      systemd:
        name: named
        state: started

    - name: Wait for DNS to restart
      wait_for:
        host: 127.0.0.1
        port: 53
        timeout: 30

    - name: Pause for DNS initialization
      pause:
        seconds: 3
  when: "'failed=0' not in zone_status_check.stdout"

- name: Verify DNS resolution is working
  command: dig +short +time=2 +tries=3 @127.0.0.1 cloudflare.com
  register: dns_test
  retries: 5
  delay: 2
  until: dns_test.rc == 0 and dns_test.stdout != ""
  changed_when: false
