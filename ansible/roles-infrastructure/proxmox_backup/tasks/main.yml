---
- name: Check if Proxmox Backup Server GPG key exists
  stat:
    path: /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
  register: proxmox_gpg_key

- name: Install Proxmox Backup Server repository key
  apt_key:
    url: https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg
    state: present
  when: not proxmox_gpg_key.stat.exists

- name: Check if Proxmox Backup Server repo is present
  shell: grep -q '^deb .*/pbs' /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null
  register: proxmox_backup_repo_present
  changed_when: false
  failed_when: false

- name: Add Proxmox Backup Server repository
  apt_repository:
    repo: "deb http://download.proxmox.com/debian/pbs bookworm pbs-no-subscription"
    state: present
    filename: proxmox-backup
  when: proxmox_backup_repo_present.rc != 0

- name: Check if Proxmox Backup Server is installed
  ansible.builtin.shell: dpkg -l | grep -qw proxmox-backup-server
  register: proxmox_backup_installed
  changed_when: false
  failed_when: false

- name: Install Proxmox Backup Server
  apt:
    name: proxmox-backup-server
    state: present
    update_cache: yes
  when: proxmox_backup_installed.rc != 0

- name: Ensure Proxmox Backup Server is started and enabled
  systemd:
    name: proxmox-backup
    state: started
    enabled: yes

# Storage Configuration - iSCSI
- name: Install iSCSI initiator packages
  ansible.builtin.package:
    name:
      - open-iscsi
      - multipath-tools
    state: present
  when: pbs_storage_backend == 'iscsi'

- name: Ensure iSCSI initiator is started and enabled
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - open-iscsi
    - iscsid
  when: pbs_storage_backend == 'iscsi'

- name: Discover iSCSI targets
  shell: |
    iscsiadm --mode discovery --type sendtargets --portal {{ pbs_iscsi_portal }}
  register: iscsi_discovery
  changed_when: false
  when: pbs_storage_backend == 'iscsi'

- name: Login to iSCSI target
  shell: |
    iscsiadm --mode node --targetname {{ pbs_iscsi_target }} --portal {{ pbs_iscsi_portal }} --login
  register: iscsi_login
  failed_when: false
  changed_when: "'successful' in iscsi_login.stdout"
  when: pbs_storage_backend == 'iscsi'

- name: Enable automatic iSCSI login on boot
  shell: |
    iscsiadm --mode node --targetname {{ pbs_iscsi_target }} --portal {{ pbs_iscsi_portal }} --op update --name node.startup --value automatic
  when: pbs_storage_backend == 'iscsi'

- name: Wait for iSCSI device to appear
  wait_for:
    path: /dev/disk/by-path/ip-{{ pbs_iscsi_portal.split(':')[0] }}:{{ pbs_iscsi_portal.split(':')[1] }}-iscsi-{{ pbs_iscsi_target }}-lun-1
    state: present
    timeout: 30
  when: pbs_storage_backend == 'iscsi'
  register: iscsi_device

- name: Get iSCSI device name
  shell: |
    readlink -f /dev/disk/by-path/ip-{{ pbs_iscsi_portal.split(':')[0] }}:{{ pbs_iscsi_portal.split(':')[1] }}-iscsi-{{ pbs_iscsi_target }}-lun-1
  register: iscsi_device_path
  changed_when: false
  when: pbs_storage_backend == 'iscsi'

- name: Check if iSCSI device is formatted
  shell: |
    blkid {{ iscsi_device_path.stdout }}
  register: iscsi_formatted
  failed_when: false
  changed_when: false
  when: pbs_storage_backend == 'iscsi'

- name: Format iSCSI LUN with {{ pbs_iscsi_filesystem }}
  filesystem:
    fstype: "{{ pbs_iscsi_filesystem }}"
    dev: "{{ iscsi_device_path.stdout }}"
    opts: -L pbs-datastore
  when: 
    - pbs_storage_backend == 'iscsi'
    - iscsi_formatted.rc != 0

- name: Ensure iSCSI mount point exists
  file:
    path: "{{ pbs_iscsi_mount_path }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: pbs_storage_backend == 'iscsi'

- name: Mount iSCSI LUN
  mount:
    path: "{{ pbs_iscsi_mount_path }}"
    src: "{{ iscsi_device_path.stdout }}"
    fstype: "{{ pbs_iscsi_filesystem }}"
    opts: _netdev,defaults
    state: mounted
  when: pbs_storage_backend == 'iscsi'

# Storage Configuration - NFS (legacy)
- name: Ensure /mnt/backups exists
  file:
    path: /mnt/backups
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: pbs_storage_backend == 'nfs'

- name: Ensure NFS packages
  ansible.builtin.package:
    name:
      - nfs-common
    state: present
  when: pbs_storage_backend == 'nfs'

- name: Ensure NFS fstab entry and mount
  ansible.posix.mount:
    backup: yes
    boot: "yes"
    path: "/mnt/backups"
    src: "{{ proxmox_backup_nfs_src }}"
    fstype: nfs
    opts: "defaults"
    state: "mounted"
  when: pbs_storage_backend == 'nfs'

- name: Remove Proxmox enterprise repo if present
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/pbs-enterprise.list
    state: absent
  register: proxmox_enterprise_repo_removed

- name: Remove Proxmox enterprise repo from /etc/apt/sources.list if present
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb .*enterprise.proxmox.com/debian/pbs'
    state: absent
  register: proxmox_enterprise_repo_line_removed

- name: Update apt cache if repo was removed
  apt:
    update_cache: yes
  when: proxmox_enterprise_repo_removed.changed or proxmox_enterprise_repo_line_removed.changed

# Datastore Configuration
- name: Ensure datastore directories exist
  file:
    path: "{{ item.path }}"
    state: directory
    owner: backup
    group: backup
    mode: '0750'
  loop: "{{ pbs_datastores }}"

- name: Check if datastores are already configured
  shell: proxmox-backup-manager datastore list --output-format json
  register: pbs_datastore_list
  changed_when: false
  failed_when: false

- name: Create datastores
  shell: |
    proxmox-backup-manager datastore create {{ item.name }} {{ item.path }}{% if item.comment is defined %} --comment "{{ item.comment }}"{% endif %}{% if item.gc_schedule is defined %} --gc-schedule "{{ item.gc_schedule }}"{% endif %}{% if item.prune_schedule is defined %} --prune-schedule "{{ item.prune_schedule }}"{% endif %}{% if item.keep_last is defined %} --keep-last {{ item.keep_last }}{% endif %}{% if item.keep_hourly is defined and item.keep_hourly > 0 %} --keep-hourly {{ item.keep_hourly }}{% endif %}{% if item.keep_daily is defined %} --keep-daily {{ item.keep_daily }}{% endif %}{% if item.keep_weekly is defined %} --keep-weekly {{ item.keep_weekly }}{% endif %}{% if item.keep_monthly is defined %} --keep-monthly {{ item.keep_monthly }}{% endif %}{% if item.keep_yearly is defined %} --keep-yearly {{ item.keep_yearly }}{% endif %}
  loop: "{{ pbs_datastores }}"
  when: pbs_datastore_list.stdout is defined and pbs_datastore_list.stdout != "" and (pbs_datastore_list.stdout | from_json | selectattr('name', 'equalto', item.name) | list | length == 0)
  register: datastore_created

# User Management
- name: Check if backup user exists
  shell: proxmox-backup-manager user list --output-format json
  register: pbs_user_list
  changed_when: false
  failed_when: false

- name: Create PBS users
  shell: |
    proxmox-backup-manager user create {{ item.username }}@{{ item.realm }} \
      {% if item.comment is defined %}--comment "{{ item.comment }}"{% endif %} \
      {% if pbs_backup_user_password is defined %}--password "{{ pbs_backup_user_password }}"{% endif %}
  loop: "{{ pbs_users }}"
  when: pbs_user_list.stdout is defined and (pbs_user_list.stdout | from_json | selectattr('userid', 'equalto', item.username + '@' + item.realm) | list | length == 0)
  no_log: true

# Namespace Configuration
# Note: Namespaces are now created automatically by backup scripts on first run
#- name: Create PBS namespaces using proxmox-backup-client (delegated)
#  shell: >
#    set +e;
#    proxmox-backup-client namespace create "{{ item.namespace }}" --repo "$PBS_REPOSITORY" --fingerprint "$PBS_FINGERPRINT" --password "$PBS_PASSWORD";
#    RC=$?;
#    set -e;
#    if [ $RC -eq 0 ]; then
#      echo "created";
#      exit 0;
#    else
#      echo "namespace create exit code: $RC";
#      exit 0;
#    fi
#  loop: "{{ pbs_namespaces }}"
#  delegate_to: plex-services
#  args:
#    executable: /bin/bash
#  register: namespace_created
#  failed_when: false
#  changed_when: namespace_created is defined
#  environment:
#    PBS_REPOSITORY: "{{ pbs_username }}!{{ pbs_token_name }}@{{ pbs_server_host }}:{{ item.datastore }}"
#    PBS_PASSWORD: "{{ pbs_token_value }}"
#    PBS_FINGERPRINT: "{{ pbs_fingerprint }}"

# ACL Configuration
- name: Grant backup user DatastoreAdmin permissions (needed for namespace creation)
  shell: |
    proxmox-backup-manager acl update /datastore/{{ item.name }} DatastoreAdmin \
      --auth-id backup@pbs
  loop: "{{ pbs_datastores }}"
  register: acl_admin_updated
  failed_when: false
  changed_when: acl_admin_updated.rc == 0

- name: Grant API token DatastoreAdmin permissions (needed for namespace creation)
  shell: |
    proxmox-backup-manager acl update /datastore/{{ item.name }} DatastoreAdmin \
      --auth-id 'backup@pbs!backup-token'
  loop: "{{ pbs_datastores }}"
  register: acl_token_admin_updated
  failed_when: false
  changed_when: acl_token_admin_updated.rc == 0

# API Token Generation
- name: Check if API token exists for backup user
  shell: proxmox-backup-manager user list-tokens backup@pbs --output-format json
  register: pbs_token_list
  changed_when: false
  failed_when: false

- name: Generate API token for backup user
  shell: |
    proxmox-backup-manager user generate-token backup@pbs backup-token
  register: pbs_token_output
  when: pbs_token_list.stdout is defined and (pbs_token_list.stdout | from_json | length == 0)

- name: Display API token (save this securely!)
  debug:
    msg: |
      ============================================
      PBS API Token Generated (SAVE THIS!):
      User: backup@pbs
      Token: backup-token
      Value: {{ pbs_token_output.stdout }}
      ============================================
      Add to ansible vault:
      pbs_backup_token: "{{ pbs_token_output.stdout }}"
  when: pbs_token_output is changed and pbs_token_output.stdout is defined

# API Token Generation - Monitoring User
- name: Check if API token exists for monitoring user
  shell: proxmox-backup-manager user list-tokens monitoring@pbs --output-format json
  register: pbs_monitoring_token_list
  changed_when: false
  failed_when: false

- name: Generate API token for monitoring user
  shell: |
    proxmox-backup-manager user generate-token monitoring@pbs monitoring-token
  register: pbs_monitoring_token_output
  when: pbs_monitoring_token_list.stdout is defined and (pbs_monitoring_token_list.stdout | from_json | length == 0)

- name: Display monitoring API token (save this securely!)
  debug:
    msg: |
      ============================================
      PBS Monitoring API Token Generated (SAVE THIS!):
      User: monitoring@pbs
      Token: monitoring-token
      Value: {{ pbs_monitoring_token_output.stdout }}
      ============================================
      Add to ansible vault:
      pbs_monitoring_token: "{{ pbs_monitoring_token_output.stdout }}"
  when: pbs_monitoring_token_output is changed and pbs_monitoring_token_output.stdout is defined

# Grant monitoring user Audit (read-only) permissions
- name: Grant monitoring user Audit permissions on datastores
  shell: |
    proxmox-backup-manager acl update /datastore/{{ item.name }} Audit \
      --auth-id monitoring@pbs
  loop: "{{ pbs_datastores }}"
  register: acl_monitoring_updated
  failed_when: false
  changed_when: acl_monitoring_updated.rc == 0

- name: Grant monitoring token Audit permissions on datastores
  shell: |
    proxmox-backup-manager acl update /datastore/{{ item.name }} Audit \
      --auth-id 'monitoring@pbs!monitoring-token'
  loop: "{{ pbs_datastores }}"
  register: acl_monitoring_token_updated
  failed_when: false
  changed_when: acl_monitoring_token_updated.rc == 0

- name: Grant monitoring user Audit permissions on system
  shell: |
    proxmox-backup-manager acl update / Audit \
      --auth-id monitoring@pbs
  register: acl_monitoring_system_updated
  failed_when: false
  changed_when: acl_monitoring_system_updated.rc == 0

- name: Grant monitoring token Audit permissions on system
  shell: |
    proxmox-backup-manager acl update / Audit \
      --auth-id 'monitoring@pbs!monitoring-token'
  register: acl_monitoring_token_system_updated
  failed_when: false
  changed_when: acl_monitoring_token_system_updated.rc == 0

# Verification jobs
- name: Configure verification jobs
  shell: |
    proxmox-backup-manager verify-job create verify-{{ item.name }} \
      --store {{ item.name }} \
      --schedule "{{ pbs_verify_schedule | default('weekly') }}"
  loop: "{{ pbs_datastores }}"
  register: verify_job_created
  failed_when: false
  changed_when: "'created' in verify_job_created.stdout or verify_job_created.rc == 0"

# GC jobs
- name: Configure garbage collection jobs
  shell: |
    proxmox-backup-manager gc-job create gc-{{ item.name }} \
      --store {{ item.name }} \
      --schedule "{{ item.gc_schedule | default('daily') }}"
  loop: "{{ pbs_datastores }}"
  register: gc_job_created
  failed_when: false
  changed_when: "'created' in gc_job_created.stdout or gc_job_created.rc == 0"

# Prune jobs
- name: Configure prune jobs
  shell: |
    proxmox-backup-manager prune-job create prune-{{ item.name }} \
      --store {{ item.name }} \
      --schedule "{{ item.prune_schedule | default('daily') }}" \
      --keep-last {{ item.keep_last | default(7) }} \
      --keep-daily {{ item.keep_daily | default(14) }} \
      --keep-weekly {{ item.keep_weekly | default(8) }} \
      --keep-monthly {{ item.keep_monthly | default(12) }} \
      --keep-yearly {{ item.keep_yearly | default(3) }}
  loop: "{{ pbs_datastores }}"
  register: prune_job_created
  failed_when: false
  changed_when: "'created' in prune_job_created.stdout or prune_job_created.rc == 0"

- name: Display PBS configuration summary
  debug:
    msg: |
      ============================================
      Proxmox Backup Server Configuration Complete
      ============================================
      Web Interface: https://{{ ansible_host }}:8007
      
      Datastores configured:
      {% for ds in pbs_datastores %}
      - {{ ds.name }}: {{ ds.path }}
      {% endfor %}
      
      Namespaces configured:
      {% for ns in pbs_namespaces %}
      - {{ ns.datastore }}:{{ ns.namespace }}
      {% endfor %}
      
      Users configured:
      {% for user in pbs_users %}
      - {{ user.username }}@{{ user.realm }}
      {% endfor %}
      
      Logs forwarded to: OpenObserve
      
      Next steps:
      1. Access web UI at https://{{ ansible_host }}:8007
      2. Login with root@pam
      3. Configure backup clients using API token
      ============================================