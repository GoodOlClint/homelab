# AdGuard Home configuration
# ANSIBLE MANAGED FILE

# HTTP settings  
http:
  pprof:
    port: 6060
    enabled: false
  address: 0.0.0.0:3000
  session_ttl: 720h

# User authentication (will be configured via web UI)
users: []
auth_attempts: 5
block_auth_min: 15
http_proxy: ""
language: ""
theme: auto

# DNS settings
dns:
  bind_hosts:
    - 127.0.0.1
    - ::1
{% for ip in dns_listen_ips %}
    - {{ ip }}
{% endfor %}
{% for ipv6 in dns_listen_ipv6s %}
    - {{ ipv6 }}
{% endfor %}
  port: 53
  
  # Anonymous stats and rate limiting
  anonymize_client_ip: false
  ratelimit: 20
  ratelimit_subnet_len_ipv4: 24
  ratelimit_subnet_len_ipv6: 56
  ratelimit_whitelist: []
  refuse_any: true
  
  # Upstream DNS servers
  upstream_dns:
    - 1.1.1.1
    - 1.0.0.1
    - 8.8.8.8
    - 8.8.4.4
    - 2606:4700:4700::1111
    - 2606:4700:4700::1001
    - 2001:4860:4860::8888
    - 2001:4860:4860::8844
  
  upstream_dns_file: ""
  bootstrap_dns:
    - 9.9.9.9
    - 149.112.112.112
    - 1.1.1.1
    - 2620:fe::fe
    - 2620:fe::9
    - 2606:4700:4700::1111
  
  fallback_dns: []
  upstream_mode: load_balance
  fastest_timeout: 1s
  allowed_clients: []
  disallowed_clients: []
  blocked_hosts:
    - version.bind
    - id.server
    - hostname.bind
  
  trusted_proxies:
    - 127.0.0.0/8
    - ::1/128
  
  # Cache settings
  cache_size: 4194304
  cache_ttl_min: 0
  cache_ttl_max: 0
  cache_optimistic: false
  
  # Additional DNS settings
  bogus_nxdomain: []
  aaaa_disabled: false
  enable_dnssec: false
  
  # EDNS settings
  edns_client_subnet:
    custom_ip: ""
    enabled: false
    use_custom: false
  
  max_goroutines: 300
  handle_ddr: true
  ipset: []
  ipset_file: ""
  bootstrap_prefer_ipv6: false
  upstream_timeout: 10s
  private_networks: []
  use_private_ptr_resolvers: true
  local_ptr_upstreams:
    - 172.16.100.53
  use_dns64: false
  dns64_prefixes: []
  serve_http3: false
  use_http3_upstreams: false
  serve_plain_dns: true
  hostsfile_enabled: true
  pending_requests:
    enabled: true

# TLS settings
tls:
  enabled: false
  server_name: ""
  force_https: false
  port_https: 443
  port_dns_over_tls: 853
  port_dns_over_quic: 853
  port_dnscrypt: 0
  dnscrypt_config_file: ""
  allow_unencrypted_doh: false
  certificate_chain: ""
  private_key: ""
  certificate_path: ""
  private_key_path: ""
  strict_sni_check: false

# Query log settings
querylog:
  dir_path: ""
  ignored: []
  interval: 2160h
  size_memory: 1000
  enabled: true
  file_enabled: true

# Statistics settings
statistics:
  dir_path: ""
  ignored: []
  interval: 24h
  enabled: true

# Filtering lists
filters:
  - enabled: true
    url: https://adguardteam.github.io/HostlistsRegistry/assets/filter_1.txt
    name: AdGuard DNS filter
    id: 1
  - enabled: true
    url: https://adguardteam.github.io/HostlistsRegistry/assets/filter_2.txt
    name: AdAway Default Blocklist
    id: 2
  - enabled: true
    url: https://someonewhocares.org/hosts/zero/hosts
    name: Dan Pollock's List
    id: 3
  - enabled: true
    url: https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
    name: StevenBlack's List
    id: 4

# Whitelist
whitelist_filters: []

# User rules
user_rules: []

# DHCP settings (disabled)
dhcp:
  enabled: false
  interface_name: ""
  local_domain_name: lan
  dhcpv4:
    gateway_ip: ""
    subnet_mask: ""
    range_start: ""
    range_end: ""
    lease_duration: 86400
    icmp_timeout_msec: 1000
    options: []
  dhcpv6:
    range_start: ""
    lease_duration: 86400
    ra_slaac_only: false
    ra_allow_slaac: false

# Filtering settings
filtering:
  blocking_ipv4: ""
  blocking_ipv6: ""
  blocked_services:
    schedule:
      time_zone: Local
    ids: []
  protection_disabled_until: null
  safe_search:
    enabled: false
    bing: true
    duckduckgo: true
    ecosia: true
    google: true
    pixabay: true
    yandex: true
    youtube: true
  blocking_mode: default
  parental_block_host: family-block.dns.adguard.com
  safebrowsing_block_host: standard-block.dns.adguard.com
  
  # DNS rewrites for local zones
  rewrites:
{% for vlan, zone_data in dns_zones.items() %}
    # DNS server for {{ zone_data.zone }}
    - domain: dns.{{ zone_data.zone }}
      answer: {{ zone_data.dns_ip }}
{% endfor %}
{% if hostvars['openobserve'] is defined and hostvars['openobserve']['ansible_host'] is defined %}
    # OpenObserve
    - domain: openobserve.{{ dns_zones.vlan100.zone }}
      answer: {{ hostvars['openobserve']['ansible_host'] }}
{% endif %}
{% if hostvars['proxmox_backup'] is defined and hostvars['proxmox_backup']['ansible_host'] is defined %}
    # Proxmox Backup Server
    - domain: proxmox-backup.{{ dns_zones.vlan100.zone }}
      answer: {{ hostvars['proxmox_backup']['ansible_host'] }}
{% endif %}
{% for vm_name in ['docker', 'homebridge', 'multicast-relay', 'nvidia-licensing', 'plex', 'plex-services'] %}
{% if hostvars[vm_name] is defined and hostvars[vm_name]['ansible_host'] is defined %}
    # {{ vm_name | title }} VM
    - domain: {{ vm_name }}.{{ dns_zones.vlan100.zone }}
      answer: {{ hostvars[vm_name]['ansible_host'] }}
{% endif %}
{% endfor %}
{% if hostvars['plex'] is defined %}
    # Service aliases - Plex media server
    - domain: media.{{ dns_zones.vlan100.zone }}
      answer: {{ hostvars['plex']['ansible_host'] }}
{% endif %}
{% if hostvars['homebridge'] is defined %}
    # Service aliases - HomeKit bridge
    - domain: homekit.{{ dns_zones.vlan100.zone }}
      answer: {{ hostvars['homebridge']['ansible_host'] }}
{% endif %}
{% if hostvars['nvidia-licensing'] is defined %}
    # Service aliases - NVIDIA DLS server
    - domain: nvidia-dls.{{ dns_zones.vlan100.zone }}
      answer: {{ hostvars['nvidia-licensing']['ansible_host'] }}
{% endif %}
{% if hostvars['plex'] is defined and hostvars['plex']['ansible_host'] is defined %}
    # Cross-VLAN access - Plex on storage network
    - domain: plex.{{ dns_zones.vlan20.zone }}
      answer: {{ hostvars['plex']['ansible_host'] | regex_replace('^172\\.16\\.100\\.', '172.16.20.') }}
{% endif %}
{% if hostvars['docker'] is defined and hostvars['docker']['ansible_host'] is defined %}
    # Cross-VLAN access - Docker on storage network
    - domain: docker.{{ dns_zones.vlan20.zone }}
      answer: {{ hostvars['docker']['ansible_host'] | regex_replace('^172\\.16\\.100\\.', '172.16.20.') }}
{% endif %}
  
  safe_fs_patterns: []
  safebrowsing_cache_size: 1048576
  safesearch_cache_size: 1048576
  parental_cache_size: 1048576
  cache_time: 30
  filters_update_interval: 24
  blocked_response_ttl: 10
  filtering_enabled: true
  parental_enabled: true
  safebrowsing_enabled: false
  protection_enabled: true

# Clients settings
clients:
  runtime_sources:
    whois: true
    arp: true
    rdns: true
    dhcp: true
    hosts: true
  persistent: []

# Log settings
log:
  enabled: true
  file: ""
  max_backups: 0
  max_size: 100
  max_age: 3
  compress: false
  local_time: false
  verbose: false

# OS settings
os:
  group: ""
  user: ""
  rlimit_nofile: 0

# Schema version
schema_version: 29
