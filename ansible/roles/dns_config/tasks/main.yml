---
- name: Set IPv4 DNS server for each interface using resolvectl
  with_dict: "{{ dns_zones }}"
  loop_control:
    loop_var: vlan
  command: >
    resolvectl dns eth_{{ vlan.key }} {{ vlan.value.dns_ip }}
  become: yes
  changed_when: false
  when: "'eth_' + vlan.key in ansible_facts.interfaces"

- name: Set IPv6 DNS server for each interface using resolvectl
  with_dict: "{{ dns_zones }}"
  loop_control:
    loop_var: vlan
  command: >
    resolvectl dns eth_{{ vlan.key }} {{ vlan.value.dns_ip }} {{ vlan.value.dns_ipv6 | default('') }}
  become: yes
  changed_when: false
  when: 
    - "'eth_' + vlan.key in ansible_facts.interfaces"
    - vlan.value.ipv6_enabled | default(false)
    - vlan.value.dns_ipv6 is defined

- name: Ensure dnsutils and inotify-tools are installed
  apt:
    name:
      - dnsutils
      - inotify-tools
    state: present
    update_cache: yes

- name: Create dynamic DNS update script
  copy:
    dest: /usr/local/bin/dns_dynamic_update.sh
    mode: '0755'
    content: |
      #!/bin/bash
      
      LOGFILE="/var/log/dns_dynamic_update.log"
      exec >> "$LOGFILE" 2>&1
      echo "[$(date)] Starting dynamic DNS update for $HOSTNAME" 
      
      DNS_TTL=3600
      DNS_KEY_FILE="/etc/bind/ddns.key"
      HOSTNAME="{{ inventory_hostname.replace('_', '-') }}"
      
      {% for vlan, data in dns_zones.items() %}
      DNS_SERVER="{{ data.dns_ip }}"
      {% if data.ipv6_enabled | default(false) and data.dns_ipv6 is defined %}
      DNS_SERVER_IPV6="{{ data.dns_ipv6 }}"
      {% endif %}
      IFACE="eth_{{ vlan }}"
      ZONE="{{ data.zone }}"
      IPV6_ENABLED="{{ data.ipv6_enabled | default(false) | string }}"
      
      # Get IPv4 address for this interface
      IP4=$(ip -4 addr show dev "$IFACE" | awk '/inet / {print $2}' | cut -d/ -f1)
      
      # Get IPv6 address for this interface (global scope only) if IPv6 is enabled
      if [[ "$IPV6_ENABLED" == "True" ]]; then
        IP6=$(ip -6 addr show dev "$IFACE" scope global | awk '/inet6 / {print $2}' | cut -d/ -f1 | head -n1)
      else
        IP6=""
      fi
      
      echo "[$(date)] Checking $IFACE (IPv6: $IPV6_ENABLED): IPv4=$IP4 IPv6=$IP6"
      
      if [[ -n "$IP4" || -n "$IP6" ]]; then
        TMPFILE=$(mktemp)
        echo "server $DNS_SERVER" > $TMPFILE
        echo "zone $ZONE" >> $TMPFILE
        
        # Update IPv4 A record
        if [[ -n "$IP4" ]]; then
          echo "update delete $HOSTNAME.$ZONE. A" >> $TMPFILE
          echo "update add $HOSTNAME.$ZONE. $DNS_TTL A $IP4" >> $TMPFILE
          echo "[$(date)] Will update A record for $HOSTNAME.$ZONE. to $IP4"
        fi
        
        # Update IPv6 AAAA record only if IPv6 is enabled for this VLAN
        if [[ "$IPV6_ENABLED" == "True" && -n "$IP6" ]]; then
          echo "update delete $HOSTNAME.$ZONE. AAAA" >> $TMPFILE
          echo "update add $HOSTNAME.$ZONE. $DNS_TTL AAAA $IP6" >> $TMPFILE
          echo "[$(date)] Will update AAAA record for $HOSTNAME.$ZONE. to $IP6"
        fi
        
        echo "send" >> $TMPFILE
        
        # Try with DNS key first, fallback to no key
        if [[ -f "$DNS_KEY_FILE" ]]; then
          nsupdate -k "$DNS_KEY_FILE" $TMPFILE && echo "[$(date)] nsupdate (key) succeeded for $ZONE" || echo "[$(date)] nsupdate (key) FAILED for $ZONE"
        else
          nsupdate $TMPFILE && echo "[$(date)] nsupdate succeeded for $ZONE" || echo "[$(date)] nsupdate FAILED for $ZONE"
        fi
        
        {% if data.ipv6_enabled | default(false) and data.dns_ipv6 is defined %}
        # If IPv6 is enabled and we have an IPv6 DNS server, also try updating via IPv6 DNS server
        if [[ "$IPV6_ENABLED" == "True" && -n "$IP6" && -n "$DNS_SERVER_IPV6" ]]; then
          TMPFILE_IPV6=$(mktemp)
          echo "server $DNS_SERVER_IPV6" > $TMPFILE_IPV6
          echo "zone $ZONE" >> $TMPFILE_IPV6
          echo "update delete $HOSTNAME.$ZONE. AAAA" >> $TMPFILE_IPV6
          echo "update add $HOSTNAME.$ZONE. $DNS_TTL AAAA $IP6" >> $TMPFILE_IPV6
          echo "send" >> $TMPFILE_IPV6
          
          if [[ -f "$DNS_KEY_FILE" ]]; then
            nsupdate -k "$DNS_KEY_FILE" $TMPFILE_IPV6 && echo "[$(date)] IPv6 nsupdate (key) succeeded for $ZONE" || echo "[$(date)] IPv6 nsupdate (key) FAILED for $ZONE"
          else
            nsupdate $TMPFILE_IPV6 && echo "[$(date)] IPv6 nsupdate succeeded for $ZONE" || echo "[$(date)] IPv6 nsupdate FAILED for $ZONE"
          fi
          rm -f $TMPFILE_IPV6
        fi
        {% endif %}
        
        rm -f $TMPFILE
      else
        echo "[$(date)] No IP found for $IFACE, skipping update."
      fi
      {% endfor %}
      echo "[$(date)] Dynamic DNS update complete for $HOSTNAME"

- name: Create systemd service for dynamic DNS update
  copy:
    dest: /etc/systemd/system/dns-dynamic-update.service
    mode: '0644'
    content: |
      [Unit]
      Description=Dynamic DNS Update on IP Change

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/dns_dynamic_update.sh

- name: Create systemd path unit to watch for IP changes
  copy:
    dest: /etc/systemd/system/dns-dynamic-update.path
    mode: '0644'
    content: |
      [Unit]
      Description=Watch for IP address changes

      [Path]
      PathChanged=/run/systemd/netif/state

      [Install]
      WantedBy=multi-user.target

- name: Enable and start dynamic DNS update path
  systemd:
    name: dns-dynamic-update.path
    enabled: yes
    state: started

- name: Run dynamic DNS update script immediately
  command: /usr/local/bin/dns_dynamic_update.sh
  become: yes
