---
- name: Set IPv4 DNS server for each interface using resolvectl
  loop: "{{ dns_zones | dict2items }}"
  loop_control:
    loop_var: vlan
  command: >
    resolvectl dns eth_{{ vlan.key }} {{ vlan.value.dns_ip }}
  become: yes
  changed_when: false
  when: "'eth_' + vlan.key in ansible_facts.interfaces"
  tags:
    - dns_config
    - dns
    - config

- name: Set IPv6 DNS server for each interface using resolvectl
  loop: "{{ dns_zones | dict2items }}"
  loop_control:
    loop_var: vlan
  command: >
    resolvectl dns eth_{{ vlan.key }} {{ vlan.value.dns_ip }} {{ vlan.value.dns_ipv6 | default('') }}
  become: yes
  changed_when: false
  when: 
    - "'eth_' + vlan.key in ansible_facts.interfaces"
    - vlan.value.ipv6_enabled | default(false)
    - vlan.value.dns_ipv6 is defined
  tags:
    - dns_config
    - dns
    - config

- name: Wait for apt lock to be released
  shell: while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done
  changed_when: false
  timeout: 300
  tags:
    - dns_config
    - packages

- name: Ensure dnsutils and inotify-tools are installed
  apt:
    name:
      - dnsutils
      - inotify-tools
    state: present
    update_cache: yes
  retries: 3
  delay: 10
  register: apt_result
  until: apt_result is success
  tags:
    - dns_config
    - dns
    - packages

- name: Initialize iface_zone_map
  set_fact:
    iface_zone_map: {}
  tags:
    - dns_config
    - dns

- name: Map interfaces to DNS zones
  set_fact:
    iface_zone_map: "{{ iface_zone_map | combine({ iface: zone.value.zone }) }}"
  vars:
    zone: "{{ dns_zones | dict2items | selectattr('value.dns_ip', 'defined') | selectattr('value.dns_ip', 'equalto', ansible_facts['interfaces'][iface]['ipv4']['address']) | list | first }}"
  loop: "{{ ansible_facts.interfaces | list }}"
  loop_control:
    loop_var: iface
  when:
    - ansible_facts['interfaces'][iface]['ipv4'] is defined
    - zone is defined
  tags:
    - dns_config
    - dns

- name: Debug iface_zone_map type
  debug:
    msg: "iface_zone_map type is {{ iface_zone_map | type_debug }} and value is {{ iface_zone_map }}"
  tags:
    - dns_config
    - dns

- name: Set DNS search suffix for each interface based on IP
  loop: "{{ iface_zone_map | dict2items }}"
  loop_control:
    loop_var: iface_zone
  command: >
    resolvectl domain {{ iface_zone.key }} {{ iface_zone.value }}
  become: yes
  changed_when: false
  tags:
    - dns_config
    - dns
    - config

- name: Create dynamic DNS update script
  copy:
    dest: /usr/local/bin/dns_dynamic_update.sh
    mode: '0755'
    content: |
      #!/bin/bash
      
      LOGFILE="/var/log/dns_dynamic_update.log"
      exec >> "$LOGFILE" 2>&1
      echo "[$(date)] Starting dynamic DNS update for $(hostname)"

      HOSTNAME="$(hostname)"

      for IFACE in $(ls /sys/class/net); do
        # Skip loopback and virtual interfaces
        [[ "$IFACE" =~ ^lo$|^bonding_masters$|^docker|^veth|^br|^virbr|^vmnet|^tap|^tun ]] && continue

        IP4=$(ip -4 addr show dev "$IFACE" | awk '/inet / {print $2}' | cut -d/ -f1)
        IP6=$(ip -6 addr show dev "$IFACE" scope global | awk '/inet6 / {print $2}' | cut -d/ -f1 | head -n1)
        if command -v resolvectl &>/dev/null; then
          SERVER_IP=$(resolvectl dns "$IFACE" | awk '{print $4}' | head -n1)
          ZONE=$(resolvectl domain "$IFACE" | awk '{print $4}' | head -n1)
        else
          SERVER_IP=$(awk '/^nameserver/ {print $2; exit}' /etc/resolv.conf)
          ZONE=$(awk '/^search/ {print $2; exit}' /etc/resolv.conf)
          if [[ -z "$ZONE" ]]; then
            ZONE=$(awk '/^domain/ {print $2; exit}' /etc/resolv.conf)
          fi
        fi
        if [[ -n "$SERVER_IP" && -n "$ZONE" && ( -n "$IP4" || -n "$IP6" ) ]]; then
          TMPFILE=$(mktemp)
          echo "server $SERVER_IP" > $TMPFILE
          echo "zone $ZONE" >> $TMPFILE
          if [[ -n "$IP4" ]]; then
            echo "update delete $HOSTNAME.$ZONE. A" >> $TMPFILE
            echo "update add $HOSTNAME.$ZONE. 3600 A $IP4" >> $TMPFILE
            echo "[$(date)] Will update A record for $HOSTNAME.$ZONE. to $IP4"
          fi
          if [[ -n "$IP6" ]]; then
            echo "update delete $HOSTNAME.$ZONE. AAAA" >> $TMPFILE
            echo "update add $HOSTNAME.$ZONE. 3600 AAAA $IP6" >> $TMPFILE
            echo "[$(date)] Will update AAAA record for $HOSTNAME.$ZONE. to $IP6"
          fi
          echo "send" >> $TMPFILE
          nsupdate $TMPFILE && echo "[$(date)] nsupdate succeeded for $ZONE" || echo "[$(date)] nsupdate FAILED for $ZONE"
          rm -f $TMPFILE
        fi
      done

      echo "[$(date)] Dynamic DNS update complete for $HOSTNAME"
  tags:
    - dns_config
    - dns
    - ddns
    - config

- name: Create systemd service for dynamic DNS update
  copy:
    dest: /etc/systemd/system/dns-dynamic-update.service
    mode: '0644'
    content: |
      [Unit]
      Description=Dynamic DNS Update on IP Change

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/dns_dynamic_update.sh
  tags:
    - dns_config
    - dns
    - ddns
    - service

- name: Create systemd path unit to watch for IP changes
  copy:
    dest: /etc/systemd/system/dns-dynamic-update.path
    mode: '0644'
    content: |
      [Unit]

      [Path]
      PathChanged=/run/systemd/netif/state

      [Install]
  tags:
    - dns_config
    - dns
    - ddns
    - service

- name: Enable and start dynamic DNS update path
  systemd:
    name: dns-dynamic-update.path
    enabled: yes
    state: started
  tags:
    - dns_config
    - dns
    - ddns
    - service

- name: Run dynamic DNS update script immediately
  command: /usr/local/bin/dns_dynamic_update.sh
  become: yes
  tags:
    - dns_config
    - dns
    - ddns
